// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PHENOMENON_IMPRESARIOSERIALIZATION_H_
#define FLATBUFFERS_GENERATED_PHENOMENON_IMPRESARIOSERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

namespace ImpresarioSerialization {

struct Phenomenon;
struct PhenomenonBuilder;

struct Phenomenon FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PhenomenonBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IDENTITY = 4,
    VT_QUANTITY = 6
  };
  int32_t identity() const {
    return GetField<int32_t>(VT_IDENTITY, 0);
  }
  float quantity() const {
    return GetField<float>(VT_QUANTITY, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_IDENTITY) &&
           VerifyField<float>(verifier, VT_QUANTITY) &&
           verifier.EndTable();
  }
};

struct PhenomenonBuilder {
  typedef Phenomenon Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_identity(int32_t identity) {
    fbb_.AddElement<int32_t>(Phenomenon::VT_IDENTITY, identity, 0);
  }
  void add_quantity(float quantity) {
    fbb_.AddElement<float>(Phenomenon::VT_QUANTITY, quantity, 0.0f);
  }
  explicit PhenomenonBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Phenomenon> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Phenomenon>(end);
    return o;
  }
};

inline flatbuffers::Offset<Phenomenon> CreatePhenomenon(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t identity = 0,
    float quantity = 0.0f) {
  PhenomenonBuilder builder_(_fbb);
  builder_.add_quantity(quantity);
  builder_.add_identity(identity);
  return builder_.Finish();
}

inline const ImpresarioSerialization::Phenomenon *GetPhenomenon(const void *buf) {
  return flatbuffers::GetRoot<ImpresarioSerialization::Phenomenon>(buf);
}

inline const ImpresarioSerialization::Phenomenon *GetSizePrefixedPhenomenon(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ImpresarioSerialization::Phenomenon>(buf);
}

inline bool VerifyPhenomenonBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ImpresarioSerialization::Phenomenon>(nullptr);
}

inline bool VerifySizePrefixedPhenomenonBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ImpresarioSerialization::Phenomenon>(nullptr);
}

inline void FinishPhenomenonBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ImpresarioSerialization::Phenomenon> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPhenomenonBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ImpresarioSerialization::Phenomenon> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ImpresarioSerialization

#endif  // FLATBUFFERS_GENERATED_PHENOMENON_IMPRESARIOSERIALIZATION_H_
