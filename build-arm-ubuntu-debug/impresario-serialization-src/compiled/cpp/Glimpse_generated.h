// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GLIMPSE_IMPRESARIOSERIALIZATION_H_
#define FLATBUFFERS_GENERATED_GLIMPSE_IMPRESARIOSERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

#include "Color_generated.h"

namespace ImpresarioSerialization {

struct Glimpse;
struct GlimpseBuilder;

struct Glimpse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GlimpseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BRIGHTNESS = 4,
    VT_COLORS = 6
  };
  uint8_t brightness() const {
    return GetField<uint8_t>(VT_BRIGHTNESS, 0);
  }
  const flatbuffers::Vector<const ImpresarioSerialization::Color *> *colors() const {
    return GetPointer<const flatbuffers::Vector<const ImpresarioSerialization::Color *> *>(VT_COLORS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_BRIGHTNESS) &&
           VerifyOffset(verifier, VT_COLORS) &&
           verifier.VerifyVector(colors()) &&
           verifier.EndTable();
  }
};

struct GlimpseBuilder {
  typedef Glimpse Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_brightness(uint8_t brightness) {
    fbb_.AddElement<uint8_t>(Glimpse::VT_BRIGHTNESS, brightness, 0);
  }
  void add_colors(flatbuffers::Offset<flatbuffers::Vector<const ImpresarioSerialization::Color *>> colors) {
    fbb_.AddOffset(Glimpse::VT_COLORS, colors);
  }
  explicit GlimpseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Glimpse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Glimpse>(end);
    return o;
  }
};

inline flatbuffers::Offset<Glimpse> CreateGlimpse(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t brightness = 0,
    flatbuffers::Offset<flatbuffers::Vector<const ImpresarioSerialization::Color *>> colors = 0) {
  GlimpseBuilder builder_(_fbb);
  builder_.add_colors(colors);
  builder_.add_brightness(brightness);
  return builder_.Finish();
}

inline flatbuffers::Offset<Glimpse> CreateGlimpseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t brightness = 0,
    const std::vector<ImpresarioSerialization::Color> *colors = nullptr) {
  auto colors__ = colors ? _fbb.CreateVectorOfStructs<ImpresarioSerialization::Color>(*colors) : 0;
  return ImpresarioSerialization::CreateGlimpse(
      _fbb,
      brightness,
      colors__);
}

inline const ImpresarioSerialization::Glimpse *GetGlimpse(const void *buf) {
  return flatbuffers::GetRoot<ImpresarioSerialization::Glimpse>(buf);
}

inline const ImpresarioSerialization::Glimpse *GetSizePrefixedGlimpse(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ImpresarioSerialization::Glimpse>(buf);
}

inline bool VerifyGlimpseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ImpresarioSerialization::Glimpse>(nullptr);
}

inline bool VerifySizePrefixedGlimpseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ImpresarioSerialization::Glimpse>(nullptr);
}

inline void FinishGlimpseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ImpresarioSerialization::Glimpse> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGlimpseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ImpresarioSerialization::Glimpse> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ImpresarioSerialization

#endif  // FLATBUFFERS_GENERATED_GLIMPSE_IMPRESARIOSERIALIZATION_H_
