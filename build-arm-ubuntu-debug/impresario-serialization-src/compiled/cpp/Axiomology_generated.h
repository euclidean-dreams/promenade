// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_AXIOMOLOGY_IMPRESARIOSERIALIZATION_H_
#define FLATBUFFERS_GENERATED_AXIOMOLOGY_IMPRESARIOSERIALIZATION_H_

#include "flatbuffers/flatbuffers.h"

namespace ImpresarioSerialization {

struct Axiomology;
struct AxiomologyBuilder;

struct Axiomology FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AxiomologyBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AXIOMS = 4
  };
  const flatbuffers::Vector<float> *axioms() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_AXIOMS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_AXIOMS) &&
           verifier.VerifyVector(axioms()) &&
           verifier.EndTable();
  }
};

struct AxiomologyBuilder {
  typedef Axiomology Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_axioms(flatbuffers::Offset<flatbuffers::Vector<float>> axioms) {
    fbb_.AddOffset(Axiomology::VT_AXIOMS, axioms);
  }
  explicit AxiomologyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Axiomology> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Axiomology>(end);
    return o;
  }
};

inline flatbuffers::Offset<Axiomology> CreateAxiomology(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<float>> axioms = 0) {
  AxiomologyBuilder builder_(_fbb);
  builder_.add_axioms(axioms);
  return builder_.Finish();
}

inline flatbuffers::Offset<Axiomology> CreateAxiomologyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *axioms = nullptr) {
  auto axioms__ = axioms ? _fbb.CreateVector<float>(*axioms) : 0;
  return ImpresarioSerialization::CreateAxiomology(
      _fbb,
      axioms__);
}

inline const ImpresarioSerialization::Axiomology *GetAxiomology(const void *buf) {
  return flatbuffers::GetRoot<ImpresarioSerialization::Axiomology>(buf);
}

inline const ImpresarioSerialization::Axiomology *GetSizePrefixedAxiomology(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ImpresarioSerialization::Axiomology>(buf);
}

inline bool VerifyAxiomologyBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ImpresarioSerialization::Axiomology>(nullptr);
}

inline bool VerifySizePrefixedAxiomologyBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ImpresarioSerialization::Axiomology>(nullptr);
}

inline void FinishAxiomologyBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ImpresarioSerialization::Axiomology> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAxiomologyBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ImpresarioSerialization::Axiomology> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace ImpresarioSerialization

#endif  // FLATBUFFERS_GENERATED_AXIOMOLOGY_IMPRESARIOSERIALIZATION_H_
